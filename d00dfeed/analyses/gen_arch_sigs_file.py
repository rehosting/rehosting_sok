#! /usr/bin/python3

# External deps
import sys, os
import matplotlib.pyplot as plt

# Internal deps
os.chdir(sys.path[0])
sys.path.append("..")
from df_common import JSON_ARC, JSON_CMP_STR, GEN_FILE_DIR
import analyses_common as ac

if __name__ == "__main__":

    if not os.path.exists(GEN_FILE_DIR):
        os.mkdir(GEN_FILE_DIR)

    ARCH_SIGS_FILE = os.path.join(GEN_FILE_DIR, "arch_signatures.py")

    # Collection
    json_files = ac.argparse_and_get_files("Gernate fingerprint file for compatible/model strings unique to each architecture")
    cmp_by_arch = ac.build_dict_two_lvl_cnt(json_files, JSON_ARC, JSON_CMP_STR)

    # Convert dict {cmp_str: cmp_str_cnt} to set of [cmp_str]
    for arch in cmp_by_arch:
        cmp_str_set = set()
        for cmp_str in cmp_by_arch[arch]:
            cmp_str_set.add(cmp_str)
        cmp_by_arch[arch] = cmp_str_set

    # Print intersections, do differences
    for this_arch in cmp_by_arch:
        for other_arch in cmp_by_arch:
            if this_arch != other_arch:
                common_devs = cmp_by_arch[this_arch].intersection(cmp_by_arch[other_arch])
                if common_devs:
                    print("\nDevices present in both \'%s\' and \'%s\'" % (this_arch, other_arch))
                    print("*" * 100 + "\n")
                    print(common_devs)
                cmp_by_arch[this_arch].difference_update(cmp_by_arch[other_arch])

    # Write unique devs to a signature file
    ac.write_hdr_for_py_file(ARCH_SIGS_FILE, "THIS FILE WAS AUTO GENERATED BY ./analyses/gen_arch_sigs_file.py")
    ac.write_dict_to_py_file(ARCH_SIGS_FILE, "UNIQUE_DEVS_BY_ARCH", cmp_by_arch)
